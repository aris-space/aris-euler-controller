#MPC_embotech_single_integrator_test_20201004181950_maximilianstoelzle : A fast customized optimization solver.
#
#Copyright (C) 2013-2020 EMBOTECH AG [info@embotech.com]. All rights reserved.
#
#
#This software is intended for simulation and testing purposes only. 
#Use of this software for any commercial purpose is prohibited.
#
#This program is distributed in the hope that it will be useful.
#EMBOTECH makes NO WARRANTIES with respect to the use of the software 
#without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
#PARTICULAR PURPOSE. 
#
#EMBOTECH shall not have any liability for any damage arising from the use
#of the software.
#
#This Agreement shall exclusively be governed by and interpreted in 
#accordance with the laws of Switzerland, excluding its principles
#of conflict of laws. The Courts of Zurich-City shall have exclusive 
#jurisdiction in case of any dispute.
#
#def __init__():
'''
a Python wrapper for a fast solver generated by FORCES PRO v4.0.0

   OUTPUT = MPC_embotech_single_integrator_test_20201004181950_maximilianstoelzle_py.MPC_embotech_single_integrator_test_20201004181950_maximilianstoelzle_solve(PARAMS) solves a multistage problem
   subject to the parameters supplied in the following dictionary:
       PARAMS['eq_C'] - matrix of size [3 x 4]
       PARAMS['eq_D'] - matrix of size [3 x 4]
       PARAMS['eq_c'] - column vector of length 3
       PARAMS['cost_H_fin'] - matrix of size [4 x 4]

   OUTPUT returns the values of the last iteration of the solver where
       OUTPUT['u0'] - column vector of size 1

   [OUTPUT, EXITFLAG] = MPC_embotech_single_integrator_test_20201004181950_maximilianstoelzle_py.MPC_embotech_single_integrator_test_20201004181950_maximilianstoelzle_solve(PARAMS) returns additionally
   the integer EXITFLAG indicating the state of the solution with 
       1 - Optimal solution has been found (subject to desired accuracy)
       2 - (only branch-and-bound) A feasible point has been identified for which the objective value is no more than codeoptions.mip.mipgap*100 per cent worse than the global optimum 
       0 - Timeout - maximum number of iterations reached
      -1 - (only branch-and-bound) Infeasible problem (problems solving the root relaxation to the desired accuracy)
      -2 - (only branch-and-bound) Out of memory - cannot fit branch and bound nodes into pre-allocated memory.
      -6 - NaN or INF occured during evaluation of functions and derivatives. Please check your initial guess.
      -7 - Method could not progress. Problem may be infeasible. Run FORCESdiagnostics on your problem to check for most common errors in the formulation.
     -10 - The convex solver could not proceed due to an internal error
    -100 - License error

   [OUTPUT, EXITFLAG, INFO] = MPC_embotech_single_integrator_test_20201004181950_maximilianstoelzle_py.MPC_embotech_single_integrator_test_20201004181950_maximilianstoelzle_solve(PARAMS) returns 
   additional information about the last iterate:
       INFO.it        - number of iterations that lead to this result
       INFO.it2opt    - number of convex solves
       INFO.res_eq    - max. equality constraint residual
       INFO.res_ineq  - max. inequality constraint residual
       INFO.pobj      - primal objective
       INFO.dobj      - dual objective
       INFO.dgap      - duality gap := pobj - dobj
       INFO.rdgap     - relative duality gap := |dgap / pobj|
       INFO.gradient_lag_norm - infinity norm of gradient of Lagrangian
       INFO.mu        - duality measure
       INFO.sigma     - centering parameter
       INFO.lsit_aff  - iterations of affine line search
       INFO.lsit_cc   - iterations of line search (combined direction)
       INFO.step_aff  - step size (affine direction)
       INFO.step_cc   - step size (centering direction)
       INFO.solvetime - Time needed for solve (wall clock time)

 See also COPYING

'''

import ctypes
import os
import numpy as np
import numpy.ctypeslib as npct
import sys

#_lib = ctypes.CDLL(os.path.join(os.getcwd(),'MPC_embotech_single_integrator_test_20201004181950_maximilianstoelzle/lib/MPC_embotech_single_integrator_test_20201004181950_maximilianstoelzle.so')) 
try:
	_lib = ctypes.CDLL(os.path.join(os.path.dirname(os.path.abspath(__file__)),'MPC_embotech_single_integrator_test_20201004181950_maximilianstoelzle/lib/MPC_embotech_single_integrator_test_20201004181950_maximilianstoelzle.so'))
	csolver = getattr(_lib,'MPC_embotech_single_integrator_test_20201004181950_maximilianstoelzle_solve')
except:
	_lib = ctypes.CDLL(os.path.join(os.path.dirname(os.path.abspath(__file__)),'MPC_embotech_single_integrator_test_20201004181950_maximilianstoelzle/lib/libMPC_embotech_single_integrator_test_20201004181950_maximilianstoelzle.so'))
	csolver = getattr(_lib,'MPC_embotech_single_integrator_test_20201004181950_maximilianstoelzle_solve')

class MPC_embotech_single_integrator_test_20201004181950_maximilianstoelzle_params_ctypes(ctypes.Structure):
#	@classmethod
#	def from_param(self):
#		return self
	_fields_ = [('eq_C', ctypes.c_double * 12),
('eq_D', ctypes.c_double * 12),
('eq_c', ctypes.c_double * 3),
('cost_H_fin', ctypes.c_double * 16),
]

MPC_embotech_single_integrator_test_20201004181950_maximilianstoelzle_params = {'eq_C' : np.array([]),
'eq_D' : np.array([]),
'eq_c' : np.array([]),
'cost_H_fin' : np.array([]),
}
params = {'eq_C' : np.array([]),
'eq_D' : np.array([]),
'eq_c' : np.array([]),
'cost_H_fin' : np.array([]),
}
MPC_embotech_single_integrator_test_20201004181950_maximilianstoelzle_params_types = {'eq_C' : np.float64,
'eq_D' : np.float64,
'eq_c' : np.float64,
'cost_H_fin' : np.float64,
}

class MPC_embotech_single_integrator_test_20201004181950_maximilianstoelzle_outputs_ctypes(ctypes.Structure):
#	@classmethod
#	def from_param(self):
#		return self
	_fields_ = [('u0', ctypes.c_double * 1),
]

MPC_embotech_single_integrator_test_20201004181950_maximilianstoelzle_outputs = {'u0' : np.array([]),
}


class MPC_embotech_single_integrator_test_20201004181950_maximilianstoelzle_info(ctypes.Structure):
#	@classmethod
#	def from_param(self):
#		return self
	_fields_ = [('it', ctypes.c_int32),
('it2opt', ctypes.c_int32),
('res_eq', ctypes.c_double),
('res_ineq', ctypes.c_double),
('pobj', ctypes.c_double),
('dobj', ctypes.c_double),
('dgap', ctypes.c_double),
('rdgap', ctypes.c_double),
('gradient_lag_norm', ctypes.c_double),
('mu', ctypes.c_double),
('mu_aff', ctypes.c_double),
('sigma', ctypes.c_double),
('lsit_aff', ctypes.c_int32),
('lsit_cc', ctypes.c_int32),
('step_aff', ctypes.c_double),
('step_cc', ctypes.c_double),
('solvetime', ctypes.c_double)
]

class FILE(ctypes.Structure):
        pass
if sys.version_info.major == 2:
	PyFile_AsFile = ctypes.pythonapi.PyFile_AsFile # problem here with python 3 http://stackoverflow.com/questions/16130268/python-3-replacement-for-pyfile-asfile
	PyFile_AsFile.argtypes = [ctypes.py_object]
	PyFile_AsFile.restype = ctypes.POINTER(FILE)

# determine data types for solver function prototype 
csolver.argtypes = ( ctypes.POINTER(MPC_embotech_single_integrator_test_20201004181950_maximilianstoelzle_params_ctypes), ctypes.POINTER(MPC_embotech_single_integrator_test_20201004181950_maximilianstoelzle_outputs_ctypes), ctypes.POINTER(MPC_embotech_single_integrator_test_20201004181950_maximilianstoelzle_info), ctypes.POINTER(FILE))
csolver.restype = ctypes.c_int

def MPC_embotech_single_integrator_test_20201004181950_maximilianstoelzle_solve(params_arg):
	'''
a Python wrapper for a fast solver generated by FORCES PRO v4.0.0

   OUTPUT = MPC_embotech_single_integrator_test_20201004181950_maximilianstoelzle_py.MPC_embotech_single_integrator_test_20201004181950_maximilianstoelzle_solve(PARAMS) solves a multistage problem
   subject to the parameters supplied in the following dictionary:
       PARAMS['eq_C'] - matrix of size [3 x 4]
       PARAMS['eq_D'] - matrix of size [3 x 4]
       PARAMS['eq_c'] - column vector of length 3
       PARAMS['cost_H_fin'] - matrix of size [4 x 4]

   OUTPUT returns the values of the last iteration of the solver where
       OUTPUT['u0'] - column vector of size 1

   [OUTPUT, EXITFLAG] = MPC_embotech_single_integrator_test_20201004181950_maximilianstoelzle_py.MPC_embotech_single_integrator_test_20201004181950_maximilianstoelzle_solve(PARAMS) returns additionally
   the integer EXITFLAG indicating the state of the solution with 
       1 - Optimal solution has been found (subject to desired accuracy)
       2 - (only branch-and-bound) A feasible point has been identified for which the objective value is no more than codeoptions.mip.mipgap*100 per cent worse than the global optimum 
       0 - Timeout - maximum number of iterations reached
      -1 - (only branch-and-bound) Infeasible problem (problems solving the root relaxation to the desired accuracy)
      -2 - (only branch-and-bound) Out of memory - cannot fit branch and bound nodes into pre-allocated memory.
      -6 - NaN or INF occured during evaluation of functions and derivatives. Please check your initial guess.
      -7 - Method could not progress. Problem may be infeasible. Run FORCESdiagnostics on your problem to check for most common errors in the formulation.
     -10 - The convex solver could not proceed due to an internal error
    -100 - License error

   [OUTPUT, EXITFLAG, INFO] = MPC_embotech_single_integrator_test_20201004181950_maximilianstoelzle_py.MPC_embotech_single_integrator_test_20201004181950_maximilianstoelzle_solve(PARAMS) returns 
   additional information about the last iterate:
       INFO.it        - number of iterations that lead to this result
       INFO.it2opt    - number of convex solves
       INFO.res_eq    - max. equality constraint residual
       INFO.res_ineq  - max. inequality constraint residual
       INFO.pobj      - primal objective
       INFO.dobj      - dual objective
       INFO.dgap      - duality gap := pobj - dobj
       INFO.rdgap     - relative duality gap := |dgap / pobj|
       INFO.gradient_lag_norm - infinity norm of gradient of Lagrangian
       INFO.mu        - duality measure
       INFO.sigma     - centering parameter
       INFO.lsit_aff  - iterations of affine line search
       INFO.lsit_cc   - iterations of line search (combined direction)
       INFO.step_aff  - step size (affine direction)
       INFO.step_cc   - step size (centering direction)
       INFO.solvetime - Time needed for solve (wall clock time)

 See also COPYING

	'''
	global _lib

	# convert parameters
	params_py = MPC_embotech_single_integrator_test_20201004181950_maximilianstoelzle_params_ctypes()
	for par in params_arg:
		try:
			#setattr(params_py, par, npct.as_ctypes(np.reshape(params_arg[par],np.size(params_arg[par]),order='A'))) 
			params_arg[par] = np.require(params_arg[par], dtype=MPC_embotech_single_integrator_test_20201004181950_maximilianstoelzle_params_types[par], requirements='F')
			setattr(params_py, par, npct.as_ctypes(np.reshape(params_arg[par],np.size(params_arg[par]),order='F')))  
		except:
			raise ValueError('Parameter ' + par + ' does not have the appropriate dimensions or data type. Please use numpy arrays for parameters.')
    
	outputs_py = MPC_embotech_single_integrator_test_20201004181950_maximilianstoelzle_outputs_ctypes()
	info_py = MPC_embotech_single_integrator_test_20201004181950_maximilianstoelzle_info()
	if sys.version_info.major == 2:
		if sys.platform.startswith('win'):
			fp = None # if set to none, the solver prints to stdout by default - necessary because we have an access violation otherwise under windows
		else:
			#fp = open('stdout_temp.txt','w')
			fp = sys.stdout
		try:
			PyFile_AsFile.restype = ctypes.POINTER(FILE)
			exitflag = _lib.MPC_embotech_single_integrator_test_20201004181950_maximilianstoelzle_solve( params_py, ctypes.byref(outputs_py), ctypes.byref(info_py), PyFile_AsFile(fp)  )
			#fp = open('stdout_temp.txt','r')
			#print (fp.read())
			#fp.close()
		except:
			#print 'Problem with solver'
			raise
	elif sys.version_info.major == 3:
		if sys.platform.startswith('win'):
			libc = ctypes.cdll.msvcrt
		elif sys.platform.startswith('darwin'):
			libc = ctypes.CDLL('libc.dylib')
		else:
			libc = ctypes.CDLL('libc.so.6')       # Open libc
		cfopen = getattr(libc,'fopen')        # Get its fopen
		cfopen.restype = ctypes.POINTER(FILE) # Yes, fopen gives a file pointer
		cfopen.argtypes = [ctypes.c_char_p, ctypes.c_char_p] # Yes, fopen gives a file pointer 
		fp = cfopen('stdout_temp.txt'.encode('utf-8'),'w'.encode('utf-8'))    # Use that fopen 

		try:
			if sys.platform.startswith('win'):
				exitflag = _lib.MPC_embotech_single_integrator_test_20201004181950_maximilianstoelzle_solve( params_py, ctypes.byref(outputs_py), ctypes.byref(info_py), None )
			else:
				exitflag = _lib.MPC_embotech_single_integrator_test_20201004181950_maximilianstoelzle_solve( params_py, ctypes.byref(outputs_py), ctypes.byref(info_py), fp )
			libc.fclose(fp)
			fptemp = open('stdout_temp.txt','r')
			print (fptemp.read())
			fptemp.close()			
		except:
			#print 'Problem with solver'
			raise

	# convert outputs
	for out in MPC_embotech_single_integrator_test_20201004181950_maximilianstoelzle_outputs:
		MPC_embotech_single_integrator_test_20201004181950_maximilianstoelzle_outputs[out] = npct.as_array(getattr(outputs_py,out))

	return MPC_embotech_single_integrator_test_20201004181950_maximilianstoelzle_outputs,int(exitflag),info_py

solve = MPC_embotech_single_integrator_test_20201004181950_maximilianstoelzle_solve


